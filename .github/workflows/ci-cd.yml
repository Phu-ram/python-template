name: CI/CD

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        poetry_version: ["1.3.2", "1.4.2"]
        architecture: ["linux/amd64", "linux/arm64"]

    env:
      DOCKER_REGISTRY_IMAGE: ${{ secrets.GITHUB_REGISTRY }}/python_poetry
      DOCKER_BUILD_PATH: .

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build and Push Docker Image
        run: |
          docker buildx create --name multiarch-builder --use ${{ runner.os }}
          docker buildx inspect multiarch-builder --bootstrap
          export DOCKER_BUILD_OPTIONS=" \
            --platform ${{ matrix.architecture }} -f dockers/python_poetry/Dockerfile \
            --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
            --build-arg POETRY_VERSION=${{ matrix.poetry_version }} \
          "
          docker buildx build --pull -t ${{ env.DOCKER_REGISTRY_IMAGE }}:${{ github.run_number }} ${{ DOCKER_BUILD_OPTIONS }} ${{ env.DOCKER_BUILD_PATH }}
          docker buildx build --push --pull -t ${{ env.DOCKER_REGISTRY_IMAGE }}:${{ github.run_number }} ${{ DOCKER_BUILD_OPTIONS }} ${{ env.DOCKER_BUILD_PATH }}

      - name: Deploy to GitHub Container Registry
        if: github.ref == 'refs/heads/master'
        run: echo "Deployment steps for master branch"

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cookiecutter

      - name: Test Bootstrap
        run: |
          cookiecutter . --no-input
          cd my-awesome-project/
          poetry install
          make ci-test

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: my-awesome-project/reports/

      - name: Publish Test Results
        uses: actions/junit-report@v2
        with:
          junit_file: my-awesome-project/reports/junit.xml

      - name: Publish Code Coverage
        uses: codecov/codecov-action@v2
        with:
          file: my-awesome-project/reports/coverage.xml
